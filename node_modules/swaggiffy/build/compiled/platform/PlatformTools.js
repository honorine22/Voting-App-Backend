"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformTools = void 0;
const fs_1 = require("fs");
const chalk_1 = __importDefault(require("chalk"));
const FileUtils_1 = require("../utils/FileUtils");
const SwaggiffyError_1 = require("../errors/SwaggiffyError");
/**
 * Platform specific tools
 */
class PlatformTools {
    /**
     * Get global variable where global scope stuff can be stored
     * @returns global
     */
    static getGlobalVariable() {
        return global;
    }
    /**
     * Read and return all file contents
     */
    static getFileContents(path) {
        if (!this.fileOrDirectoryExists(path))
            throw new Error('File doesnot exist');
        return (0, fs_1.readFileSync)(path);
    }
    /**
     * Write content to a file
     */
    // static writeToFile(path: string, content: string): Promise<void> {
    //     return new Promise<void>((ok, fail) => {
    //         writeFile(path, content, (err) => {
    //             if (err) fail(err);
    //             ok();
    //         });
    //     });
    // }
    static writeToFile(path, content) {
        try {
            (0, fs_1.writeFileSync)(path, content);
        }
        catch (err) {
            throw new SwaggiffyError_1.SwaggiffyError('Error writing to file');
        }
    }
    /**
     * Read the name property from package.json
     * @returns Project Name
     */
    static getProjectName() {
        const path = process.cwd() + '/package.json';
        const npmConfig = JSON.parse(FileUtils_1.FileUtils.getFileContents(path).toString());
        return npmConfig['displayName'] || npmConfig['name'];
    }
    /**
     * Check if file or directory exists
     */
    static fileOrDirectoryExists(path) {
        return (0, fs_1.existsSync)(path);
    }
    static logSuccess(message) {
        console.log(chalk_1.default.green(message));
    }
    static logWarn(message) {
        console.log(chalk_1.default.yellow(message));
    }
    // eslint-ignore/no-explicit-any
    static logCmdErr(message, err) {
        console.log(chalk_1.default.black.bgRed(message));
        if (err)
            console.error(err);
    }
}
exports.PlatformTools = PlatformTools;
/**
 * Type of current running platform
 */
PlatformTools.platform = 'cli';
//# sourceMappingURL=PlatformTools.js.map