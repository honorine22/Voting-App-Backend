"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitRunner = void 0;
const globals_1 = require("../globals");
const Defaults_1 = require("../utils/Defaults");
const FileUtils_1 = require("../utils/FileUtils");
const Templates_1 = require("../utils/Templates");
const SetupRunner_1 = require("./SetupRunner");
/**
 * Swaggiffy Initialization Runner
 */
class InitRunner {
    /**
     * Extract Configurations from Swaggiffy config file
     * @returns Promise<ConfigurationProps>
     */
    static async extractConfigurations() {
        return new Promise(async (ok, fail) => {
            const configFile = process.cwd() + '/' + FileUtils_1.FileUtils.cleanPath(Defaults_1.Defaults.SWAGGIFY_CONFIG_FILE);
            let configuration = JSON.parse(await FileUtils_1.FileUtils.getFileContents(configFile, { type: 'Configuration', throwable: false }).toString());
            if (typeof configuration === 'boolean') {
                await SetupRunner_1.SetupRunner.generateConfigFile(Templates_1.Templates.getConfigTemplate());
                configuration = JSON.parse(await FileUtils_1.FileUtils.getFileContents(configFile).toString());
            }
            ok(configuration);
        });
    }
    /**
     * Caches Global Configurations.
     * @returns Promise<void>
     */
    static async cacheGlobalConfigurations() {
        return new Promise(async (ok, fail) => {
            const config = await this.extractConfigurations();
            if (!FileUtils_1.FileUtils.fileOrDirectoryExists(config.outFile)) {
                if (config.openApiVersion.includes('2.'))
                    await SetupRunner_1.SetupRunner.generateSpecFile(Templates_1.Templates.getOSA2Template());
                else if (config.openApiVersion.includes('3.'))
                    await SetupRunner_1.SetupRunner.generateSpecFile(Templates_1.Templates.getOSA3Template());
            }
            (0, globals_1.setConfigMetadataStorage)(config);
            ok();
        });
    }
}
exports.InitRunner = InitRunner;
//# sourceMappingURL=InitRunner.js.map