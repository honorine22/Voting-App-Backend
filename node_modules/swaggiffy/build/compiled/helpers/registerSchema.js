"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerSchemas = exports.registerSchema = void 0;
const globals_1 = require("../globals");
const Utility_1 = require("../utils/Utility");
const mongoose = __importStar(require("mongoose"));
const SwaggiffyError_1 = require("../errors/SwaggiffyError");
const schema_extractor_1 = require("../extractors/schema.extractor");
function registerSchema(name, schema, options) {
    let extractor;
    if (options) {
        if (options.orm === 'mongoose') {
            extractor = schema_extractor_1.SchemaExtractor.extractMongoose(schema, name);
        }
        else if (options.orm === 'sequelize') {
            extractor = schema_extractor_1.SchemaExtractor.extractSequelize(schema, name);
        }
        else {
            throw new SwaggiffyError_1.SwaggiffyError('Orm is not supported');
        }
    }
    else {
        if (schema instanceof mongoose.Schema) {
            extractor = schema_extractor_1.SchemaExtractor.extractMongoose(schema, name);
        }
        else {
            extractor = schema_extractor_1.SchemaExtractor.extractPlain(schema, name);
        }
    }
    const swaggerDefinition = Utility_1.Utility.genSchemaDef(extractor);
    (0, globals_1.getSchemaMetadataStorage)().schemas.push({
        target: extractor,
        name: name,
        swaggerDefinition,
    });
}
exports.registerSchema = registerSchema;
function registerSchemas(schemas) {
    let extractor;
    for (const _schema of schemas) {
        if (_schema.options) {
            if (_schema.options.orm === 'mongoose') {
                extractor = schema_extractor_1.SchemaExtractor.extractMongoose(_schema.schema, _schema.name);
            }
            else {
                throw new SwaggiffyError_1.SwaggiffyError('Orm is not supported');
            }
        }
        else {
            if (_schema.schema instanceof mongoose.Schema) {
                extractor = schema_extractor_1.SchemaExtractor.extractMongoose(_schema.schema, _schema.name);
            }
            else {
                extractor = schema_extractor_1.SchemaExtractor.extractPlain(_schema.schema, _schema.name);
            }
        }
        const swaggerDefinition = Utility_1.Utility.genSchemaDef(extractor);
        (0, globals_1.getSchemaMetadataStorage)().schemas.push({
            target: extractor,
            name: _schema.name,
            swaggerDefinition,
        });
    }
}
exports.registerSchemas = registerSchemas;
//# sourceMappingURL=registerSchema.js.map