/// <reference types="node" />
import { SchemaMetadata } from '../storage/types/SchemaMetadata';
import { SwaggerAPIDefinition, TClassDef, TSwaggerDataType, TSwaggerNumberFormats, TSwaggerSchema, TSwaggerSchemaDef, TSwaggerStringFormats } from '../typings';
import { ConfigMetadataStorage } from '../storage/ConfigMetadataStorage';
import { APIDefinitionMetadata } from '../storage/types/APIDefinitionMetadata';
export declare class Utility {
    /**
     * Returns target Class properties
     * @param _class
     * @returns Target class properties
     */
    static configStore: ConfigMetadataStorage;
    /**
     * Generate Swagger Schema Definition
     */
    static genSchemaDef(obj: TClassDef): TSwaggerSchema;
    /**
     * Extracts Swagger Schema Object from JSON
     * @param swagger JSON Document
     * @params schema: new swaggified schemas
     * @returns schema object
     */
    static updateSchema(swaggerDoc: Buffer, schema: TSwaggerSchemaDef): string;
    /**
     * Extracts Swagger Schema Object from JSON
     * @param swagger JSON Document
     * @params schema: new swaggified schemas
     * @returns schema object
     */
    static updateAPIDefinition(swaggerDoc: Buffer, apiDefinition: SwaggerAPIDefinition): string;
    /**
     * Generates swagger file from schemas
     * @params schema
     * @returns Promise<void>
     */
    static swaggiffy(schema: TSwaggerSchemaDef | SwaggerAPIDefinition, type: 'DEFINITION' | 'SCHEMA'): Promise<void>;
    /**
     * Converts SchemaMetadata[] to plain JSON Object
     * @param array SchemaMetadata array
     * @returns JSON defined SwaggerSchema
     */
    static toSwaggerSchema(array: SchemaMetadata[]): TSwaggerSchemaDef;
    /**
     * Converts APIDefinitionMetadata[] to plain JSON Object
     * @param array APIDefinitionMetadata array
     * @returns JSON defined SwaggerSchema
     */
    static toSwaggerAPIDefinition(array: APIDefinitionMetadata[]): SwaggerAPIDefinition;
    static extractType(func: Function): "string" | "number" | "boolean" | undefined;
    static castMongooseType(type: string): [TSwaggerDataType, TSwaggerStringFormats | TSwaggerNumberFormats | undefined, boolean | undefined, string | number | boolean | undefined];
    static castSequelizeType(type: string): [TSwaggerDataType, TSwaggerStringFormats | TSwaggerNumberFormats | undefined, boolean | undefined, string | number | boolean | undefined];
    static castJSType(type: string): [TSwaggerDataType, TSwaggerStringFormats | TSwaggerNumberFormats | undefined];
}
