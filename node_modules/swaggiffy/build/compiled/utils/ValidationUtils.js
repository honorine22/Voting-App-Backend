"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationUtils = void 0;
const SwaggiffyError_1 = require("../errors/SwaggiffyError");
/**
 * Validation Utility Class
 */
class ValidationUtils {
    /**
     * Cleans file path. Remove ending '/'.
     * @param filePath File Path
     */
    static cleanFilePath(filePath) {
        if (filePath.startsWith('/'))
            filePath = filePath.substring(1, filePath.length);
        if (filePath.endsWith('/'))
            filePath = filePath.substring(0, filePath.lastIndexOf('/'));
        return filePath;
    }
    /**
     * Validates relative file paths
     * @param filePath File Path
     */
    static validateFilePath(filePath, format) {
        filePath = this.cleanFilePath(filePath);
        if (format) {
            if (!filePath.endsWith(format))
                throw new SwaggiffyError_1.SwaggiffyError(`Invalid file type provided, You provided a file extension different from ${format}`);
        }
        if (!filePath.endsWith('.json') && !filePath.endsWith('.yaml') && !filePath.endsWith('.yml'))
            throw new SwaggiffyError_1.SwaggiffyError('Invalid file type provided, file extensions other than [json, yaml, yml] are not allowed');
        return filePath;
    }
    /**
     * Validates API Route Urls
     * @param routeUrl Route Url
     */
    static validateAPIRoute(routeUrl) {
        if (!routeUrl.startsWith('/'))
            throw new SwaggiffyError_1.SwaggiffyError(`Invalid API route url format. Start with a '/'`);
        return routeUrl;
    }
    /**
     * Formats and cleans file path
     * @param pathString
     * @returns
     */
    static cleanSwaggerPathString(pathString) {
        if (pathString.includes('/:')) {
            let split = pathString.split('/');
            let map = split.map((path) => (path.startsWith(':') ? `{${path.substring(1)}}` : path));
            pathString = map.join('/');
        }
        let cleanPath = pathString;
        if (pathString.startsWith('./'))
            cleanPath = pathString.replace('./', '');
        if (pathString.endsWith('/'))
            cleanPath = pathString.slice(0, pathString.length - 1);
        return cleanPath;
    }
}
exports.ValidationUtils = ValidationUtils;
//# sourceMappingURL=ValidationUtils.js.map