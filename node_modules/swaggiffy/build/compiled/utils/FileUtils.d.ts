/// <reference types="node" />
/**
 * File Utils
 */
export declare class FileUtils {
    /**
     * Read and return all file contents
     */
    static getFileContents(path: string, extra?: {
        throwable: boolean;
        type: string;
    }): Buffer | boolean;
    /**
     * Resolves a given path
     */
    static pathResolve(pathStr: string): string;
    /**
     * Extract Directory from file Path String
     * @param pathStr Path string
     */
    static extractDirectoryFromFilePath(pathStr: string): string | null;
    /**
     * Creates a file if not exists in current working directory.
     * @param pathStr: Path
     */
    static createFileInWorkspace(pathStr: string, override?: boolean): Promise<string>;
    /**
     * Create directory with specified path
     * @param dir Directory path
     * @returns
     */
    static createDirectory(dir: string): Promise<void>;
    /**
     * Write content to a file
     */
    static writeToFile(pathStr: string, content: string): Promise<string>;
    /**
     * Return filename from path. Does path.basename()
     * @param path Path
     * @returns filename
     */
    static getFileName(pathStr: string): string;
    /**
     * Return filename from path. Does path.extname()
     * @param path Path
     * @returns filename
     */
    static getFileExtension(pathStr: string): string;
    /**
     * Formats and cleans file path
     * @param pathString
     * @returns
     */
    static cleanPath(pathString: string): string;
    /**
     * Check if file or directory exists
     */
    static fileOrDirectoryExists(pathStr: string): boolean;
}
