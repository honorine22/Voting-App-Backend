"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUtils = void 0;
const fs_1 = require("fs");
const path = __importStar(require("path"));
const SwaggiffyError_1 = require("../errors/SwaggiffyError");
const PlatformTools_1 = require("../platform/PlatformTools");
const ValidationUtils_1 = require("./ValidationUtils");
/**
 * File Utils
 */
class FileUtils {
    /**
     * Read and return all file contents
     */
    static getFileContents(path, extra) {
        if (!this.fileOrDirectoryExists(path)) {
            if (extra) {
                if (!extra.throwable)
                    return false;
            }
            throw new SwaggiffyError_1.SwaggiffyError(`${extra ? extra.type : ''} File not found.`);
        }
        return (0, fs_1.readFileSync)(path);
    }
    /**
     * Resolves a given path
     */
    static pathResolve(pathStr) {
        return path.resolve(pathStr);
    }
    /**
     * Extract Directory from file Path String
     * @param pathStr Path string
     */
    static extractDirectoryFromFilePath(pathStr) {
        ValidationUtils_1.ValidationUtils.validateFilePath(pathStr);
        const iFirst = pathStr.indexOf('/');
        const iLast = pathStr.lastIndexOf('/');
        if (iFirst === iLast)
            return null;
        return pathStr.substring(0, iLast);
    }
    /**
     * Creates a file if not exists in current working directory.
     * @param pathStr: Path
     */
    static createFileInWorkspace(pathStr, override = false) {
        const dir = this.extractDirectoryFromFilePath(pathStr);
        if (dir)
            this.createDirectory(dir);
        const openFile = (ok, fail) => {
            (0, fs_1.open)(pathStr, 'w', function (err, file) {
                if (err)
                    fail(err);
                PlatformTools_1.PlatformTools.logSuccess(`Generated ${pathStr}`);
                ok(pathStr);
            });
        };
        return new Promise((ok, fail) => {
            if (!this.fileOrDirectoryExists(pathStr)) {
                openFile(ok, fail);
            }
            else {
                if (override) {
                    openFile(ok, fail);
                }
                else {
                    PlatformTools_1.PlatformTools.logSuccess('Config file already exists.');
                }
            }
        });
    }
    /**
     * Create directory with specified path
     * @param dir Directory path
     * @returns
     */
    static createDirectory(dir) {
        return new Promise((ok, fail) => {
            if (!this.fileOrDirectoryExists(dir)) {
                (0, fs_1.mkdirSync)(dir, { recursive: true });
            }
            ok();
        });
    }
    /**
     * Write content to a file
     */
    static writeToFile(pathStr, content) {
        return new Promise((ok, fail) => {
            (0, fs_1.writeFile)(pathStr, content, (err) => {
                if (err)
                    fail(err);
                ok(pathStr);
            });
        });
    }
    /**
     * Return filename from path. Does path.basename()
     * @param path Path
     * @returns filename
     */
    static getFileName(pathStr) {
        return path.basename(pathStr);
    }
    /**
     * Return filename from path. Does path.extname()
     * @param path Path
     * @returns filename
     */
    static getFileExtension(pathStr) {
        return path.extname(pathStr);
    }
    /**
     * Formats and cleans file path
     * @param pathString
     * @returns
     */
    static cleanPath(pathString) {
        let cleanPath = pathString;
        if (pathString.startsWith('./'))
            cleanPath = pathString.replace('./', '');
        if (pathString.endsWith('/'))
            cleanPath = pathString.slice(0, pathString.length - 1);
        return cleanPath;
    }
    /**
     * Check if file or directory exists
     */
    static fileOrDirectoryExists(pathStr) {
        return (0, fs_1.existsSync)(pathStr);
    }
}
exports.FileUtils = FileUtils;
//# sourceMappingURL=FileUtils.js.map