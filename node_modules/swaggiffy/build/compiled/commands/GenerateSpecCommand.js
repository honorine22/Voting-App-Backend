"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateSpecCommand = void 0;
const globals_1 = require("../globals");
const PlatformTools_1 = require("../platform/PlatformTools");
const SetupRunner_1 = require("../runners/SetupRunner");
const Templates_1 = require("../utils/Templates");
/**
 * Generate Spec Command
 */
class GenerateSpecCommand {
    constructor() {
        this.command = 'generate:spec';
        this.describe = 'Generate swaggiffy specifications file.';
        this.aliases = 'g:spec';
    }
    builder(args) {
        return args
            .option('path', {
            alias: 'specFilePath',
            type: 'string',
            describe: 'File where the swagger specifications will be be created. Defaults to BASE_DIR/swagger/swagger.json .',
        })
            .option('o', {
            alias: 'openApiVersion',
            type: 'string',
            choices: ['2.0', '3.0'],
            describe: 'Choose OpenAPI version, expected values are 2.0, 3.0',
        })
            .option('r', {
            alias: 'refresh',
            type: 'boolean',
            describe: 'Re-generate and overwrite existing config file.',
        });
    }
    async handler(args) {
        try {
            const override = args.refresh ? true : false;
            const template = args.openApiVersion != undefined
                ? args.openApiVersion == '2.0'
                    ? Templates_1.Templates.getOSA2Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort)
                    : args.openApiVersion == '3.0'
                        ? Templates_1.Templates.getOSA3Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort)
                        : ''
                : Templates_1.Templates.getOSA2Template();
            const specFile = await SetupRunner_1.SetupRunner.generateSpecFile(template, args.specFilePath, override);
            PlatformTools_1.PlatformTools.logSuccess('Successfully generated spec file');
        }
        catch (err) {
            PlatformTools_1.PlatformTools.logCmdErr('Error when generating config file: ', err);
        }
    }
}
exports.GenerateSpecCommand = GenerateSpecCommand;
//# sourceMappingURL=GenerateSpecCommand.js.map