"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionCommand = void 0;
const child_process_1 = require("child_process");
const PlatformTools_1 = require("../platform/PlatformTools");
class VersionCommand {
    constructor() {
        this.command = 'version';
        this.describe = 'Prints Swaggiffy version this project uses';
    }
    /**
     * Handle Command.
     */
    async handler() {
        const SWAGGIFY_PATTERN = / @divinirakiza@swaggiffy@(.*)\n/;
        const localNpmList = await VersionCommand.executeCommand('npm list --depth=0');
        const localMatches = localNpmList.match(SWAGGIFY_PATTERN);
        const localNpmVersion = (localMatches && localMatches[1] ? localMatches[1] : '').replace(/"invalid"/gi, '').trim();
        const globalNpmList = await VersionCommand.executeCommand('npm list -g --depth=0');
        const globalMatches = globalNpmList.match(SWAGGIFY_PATTERN);
        const globalNpmVersion = (globalMatches && globalMatches[1] ? globalMatches[1] : '').replace(/"invalid"/gi, '').trim();
        if (localNpmVersion) {
            PlatformTools_1.PlatformTools.logSuccess(`Local installed version: ${localNpmVersion}`);
        }
        else {
            PlatformTools_1.PlatformTools.logCmdErr('No local installed Swaggiffy was found.');
        }
        if (globalNpmVersion) {
            PlatformTools_1.PlatformTools.logSuccess('Global installed Swaggiffy version: ' + globalNpmVersion);
        }
        else {
            PlatformTools_1.PlatformTools.logCmdErr('No global installed was found.');
        }
        if (localNpmVersion && globalNpmVersion && localNpmVersion !== globalNpmVersion) {
            PlatformTools_1.PlatformTools.logWarn('To avoid issues with CLI please make sure your global and local Swaggiffy versions match, ' +
                'or you are using locally installed Swaggiffy instead of global one.');
        }
    }
    static executeCommand(command) {
        return new Promise((ok, fail) => {
            (0, child_process_1.exec)(command, (err, stdout, stderr) => {
                if (stdout)
                    return ok(stdout);
                if (stderr)
                    return ok(stderr);
                if (err)
                    return fail(err);
                ok('');
            });
        });
    }
}
exports.VersionCommand = VersionCommand;
//# sourceMappingURL=VersionCommand.js.map