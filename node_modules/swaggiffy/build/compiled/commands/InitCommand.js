"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitCommand = void 0;
const PlatformTools_1 = require("../platform/PlatformTools");
const globals_1 = require("../globals");
const SetupRunner_1 = require("../runners/SetupRunner");
const Templates_1 = require("../utils/Templates");
const ValidationUtils_1 = require("../utils/ValidationUtils");
const Defaults_1 = require("../utils/Defaults");
/**
 * Swaggiffy generator
 */
class InitCommand {
    constructor() {
        this.command = 'init';
        this.describe = 'Builds and Generates necessarly config files for Swaggiffy inside the current directory.';
    }
    builder(args) {
        return args
            .option('n', {
            alias: 'name',
            describe: 'Name of project',
        })
            .option('o', {
            alias: 'openApiVersion',
            choices: ['2.0', '3.0'],
            describe: 'Choose OpenAPI version, expected values are 2.0, 3.0',
        })
            .option('f', {
            alias: 'format',
            choices: ['json', 'yaml'],
            describe: 'Swagger Specification Format, expected values are JSON, YAML',
        })
            .option('d', {
            alias: 'defFile',
            describe: 'Swagger Definition output file path',
        })
            .option('p', {
            alias: 'port',
            describe: 'Swagger port',
        })
            .option('a', {
            alias: 'apiRoute',
            describe: 'Swagger Documentation API Route',
        })
            .option('r', {
            alias: 'refresh',
            type: 'boolean',
            describe: 'Regenerates new Swagger Config file',
        });
    }
    async handler(args) {
        try {
            (0, globals_1.getConfigMetadataStorage)().appName = args.name || PlatformTools_1.PlatformTools.getProjectName();
            (0, globals_1.getConfigMetadataStorage)().openApiVersion = args.openApiVersion || Defaults_1.Defaults.OPENAPI_VERSION;
            (0, globals_1.getConfigMetadataStorage)().format = args.format || Defaults_1.Defaults.SWAGGER_DEFINITION_FORMAT;
            (0, globals_1.getConfigMetadataStorage)().appPort = args.port || Defaults_1.Defaults.APP_PORT;
            (0, globals_1.getConfigMetadataStorage)().swaggerDefinitionFilePath = args.defFile
                ? ValidationUtils_1.ValidationUtils.validateFilePath(args.defFile, args.format)
                : Defaults_1.Defaults.SWAGGER_DEFINITION_FILE;
            (0, globals_1.getConfigMetadataStorage)().swaggerEndPointUrl = args.apiRoute
                ? ValidationUtils_1.ValidationUtils.validateAPIRoute(args.apiRoute)
                : Defaults_1.Defaults.SWAGGER_ENDPOINT_URL;
            SetupRunner_1.SetupRunner.generateConfigFile(Templates_1.Templates.getConfigTemplate({
                projectName: (0, globals_1.getConfigMetadataStorage)().appName,
                outFile: (0, globals_1.getConfigMetadataStorage)().swaggerDefinitionFilePath,
                apiRouteUrl: (0, globals_1.getConfigMetadataStorage)().swaggerEndPointUrl,
                appPort: (0, globals_1.getConfigMetadataStorage)().appPort,
                openApiVersion: (0, globals_1.getConfigMetadataStorage)().openApiVersion,
                format: (0, globals_1.getConfigMetadataStorage)().format,
            }), args.refresh ? true : false);
            const template = args.openApiVersion != undefined
                ? args.openApiVersion == '2.0'
                    ? Templates_1.Templates.getOSA2Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort)
                    : args.openApiVersion == '3.0'
                        ? Templates_1.Templates.getOSA3Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort)
                        : Templates_1.Templates.getOSA2Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort)
                : Templates_1.Templates.getOSA2Template((0, globals_1.getConfigMetadataStorage)().appName, (0, globals_1.getConfigMetadataStorage)().appPort);
            await SetupRunner_1.SetupRunner.generateSpecFile(template, args.specFilePath);
        }
        catch (err) {
            PlatformTools_1.PlatformTools.logCmdErr('Error when initializing swaggiffy.', err);
            process.exit(1);
        }
    }
}
exports.InitCommand = InitCommand;
//# sourceMappingURL=InitCommand.js.map