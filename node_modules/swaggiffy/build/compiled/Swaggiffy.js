"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Swaggiffy = void 0;
const app_1 = __importDefault(require("./app"));
const globals_1 = require("./globals");
const SwaggiffyError_1 = require("./errors/SwaggiffyError");
const InitRunner_1 = require("./runners/InitRunner");
/**
 * Swaggiffy base class
 */
class Swaggiffy {
    constructor() {
        this.configStore = (0, globals_1.getConfigMetadataStorage)();
        this.app = new app_1.default();
    }
    /**
     * Setups expressApplication with swaggiffy.
     * @returns Swaggiffy
     */
    setupExpress(expressApp) {
        // this.configStore expressApplication in ConfigMetadataStorage.
        this.configStore.expressApplication = expressApp;
        return this;
    }
    /**
     * dsfa
     *
     * Setups route endpoint url with swaggiffy.
     * @returns Swaggiffy
     */
    setupRoute(routeEndPointUrl) {
        this.configStore.swaggerEndPointUrl = routeEndPointUrl;
        return this;
    }
    /**
     * dsfa
     *
     * Setups route endpoint url with swaggiffy.
     * @returns Swaggiffy
     */
    setupPort(port) {
        this.configStore.appPort = port;
        return this;
    }
    /**
     * Setups and Builds a swagger config file template in the specified directory and file.
     * @returns Swaggiffy
     */
    setupSwagger(filePath) {
        this.configStore.swaggerDefinitionFilePath = this.configStore.relativePath ? process.cwd() + '/' + filePath : filePath;
        return this;
    }
    /**
     * Swaggifies your application.
     * @returns Swaggiffy
     */
    async swaggiffy() {
        try {
            if (this.configStore.expressApplication === undefined || this.configStore.expressApplication === null)
                throw new SwaggiffyError_1.SwaggiffyError('Express Application instance is undefined.');
            await InitRunner_1.InitRunner.cacheGlobalConfigurations();
            this.app.init(this.configStore);
        }
        catch (err) {
            throw new SwaggiffyError_1.SwaggiffyError();
        }
        return this;
    }
}
exports.Swaggiffy = Swaggiffy;
//# sourceMappingURL=Swaggiffy.js.map